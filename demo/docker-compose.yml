version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - feature_store

  kafka:
    image: confluentinc/cp-server:7.0.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - feature_store

  kafdrop:
    image: obsidiandynamics/kafdrop
    hostname: kafdrop
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: 'kafka:29092'
      JVM_OPTS: '-Xms32M -Xmx64M'
    networks:
      - feature_store

  redis:
    image: redis:7.0.4
    container_name: redis
    command: redis-server
    ports:
      - "6379:6379"
    networks:
      - feature_store

  redis-commander:
    container_name: redis_commander
    hostname: redis_commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "8082:8081"
    networks:
      - feature_store

  mongo:
    image: mongo:6.0.1
    restart: always
    hostname: mongo
    container_name: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
      MONGO_INITDB_DATABASE: registry
    volumes:
      - ./registry/docker-initdb:/docker-entrypoint-initdb.d/
    networks:
      - feature_store

  mongo-express:
    image: mongo-express:1.0.0-alpha
    hostname: mongo_express
    container_name: mongo_express
    restart: always # fixes MongoNetworkError when mongo is not ready when mongo-express starts
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=secret
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
    networks:
      - feature_store

  registry:
    build: 
      context: ./registry
    image: registry
    hostname: registry
    container_name: registry
    depends_on:
      - mongo
    environment:
      MONGO_USER: 'registry_user'
      MONGO_PASSWORD: 'registry_secret'
      MONGO_DATABASE: 'registry'
      MONGO_HOST: 'mongo'
      MONGO_PORT: '27017'
    ports:
      - 8000:8000
    networks:
      - feature_store

  transformations:
    build: 
      context: ./transformations
    image: transformations
    container_name: transformations
    hostname: transformations
    depends_on:
      - kafka
      - redis
      - registry
    command: transformations
    environment:
      KAFKA_BROKER: 'kafka:29092'
      MONGO_USER: 'registry_user'
      MONGO_PASSWORD: 'registry_secret'
      MONGO_DATABASE: 'registry'
      MONGO_HOST: 'mongo'
      MONGO_PORT: '27017'
      REGISTRY_HOST: 'registry:8000'
    ports:
      - "4040:4040"
    networks:
      - feature_store

networks:
  feature_store:
    name: feature_store_net
    driver: bridge
